package com.app.controllers;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.custom_exception.ResourceNotFoundException;
import com.app.dao.CustomerDao;
import com.app.dao.LoginDao;
import com.app.dto.CredentialsDTO;
import com.app.dto.CustomerDTO;
import com.app.dto.SignUpDto;
import com.app.pojos.Customer;
import com.app.service.CustomerService;

@RestController
@CrossOrigin
@RequestMapping("/customer")
@Validated
public class CustomerController {

	@Autowired
	private CustomerService customerService;
	
	@Autowired
	private CustomerDao customerDao;
	
	@Autowired
	private LoginDao loginDao;
	
	@Autowired
	private PasswordEncoder encode;

	@PostMapping("/signin")
	public ResponseEntity<?> validateCustomer(@RequestBody @Valid CredentialsDTO dto) {
		return ResponseEntity.ok(customerService.authenticateCustomer(dto));
	}

	@PutMapping
	public Customer updateCustomerDetails(@RequestBody CustomerDTO detachedCustomer) {
		//System.out.println("in update emp " + detachedCustomer.getId());// not null
		return customerService.updateCustomerDetails(detachedCustomer);
	}

	@PostMapping("/signup")
	    public ResponseEntity<?> registerCustomer(@RequestBody CustomerDTO transientCust){
//		Boolean exist=customerService.findByEmail(transientCust.getEmail());
//		if(!exist)
		{
			Customer cust=new Customer();
			cust.setName(transientCust.getName());
			cust.setEmail(transientCust.getEmail());
			cust.setMob(transientCust.getMob());
			cust.setPassword(transientCust.getPassword());
			
			customerDao.save(cust);
			return new ResponseEntity<>("User registered successfully", HttpStatus.OK);
			
		}
//		else
//			throw new ResourceNotFoundException("Email already exists!");

		
	}
	
	@GetMapping("/")
	public List<Customer> getAllCust() {
		return customerService.getAllCustDetails();
	}
	
	@PostMapping("/{messId}")
	public List<Customer> getCustByMessId(Long messId)
	{
		return customerService.getCustByMess(messId);
	}
	
	
	@GetMapping("/count")
	public Long noOfCustomers()
	{
		return customerService.noOfCustomers();
	}
}
